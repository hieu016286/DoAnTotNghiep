// Container widths
$grid-gutter-width: 30px !default;
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    //xl: 1140px
    xl: 1215px
) !default;
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px
) !default;
@mixin make-container() {
    width: 100%;
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
    margin-right: auto;
    margin-left: auto;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

$enable-grid-classes: true !default;

//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    .container {
        @include make-container();
        @include make-container-max-widths();
    }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

*, ::after, ::before {
    box-sizing: border-box;
}

//==============Style common===============//
* {
    margin: 0;
    padding: 0;
}

body {
    background: #f5f5f5;
    color: #252525;
    font-family: Roboto, Helvetica Neue, Helvetica, Arial, sans-serif;
    font-size: 14px;
    font-weight: 400;
    line-height: 1.5;
    margin: 0;
}

.container {
    padding: 0;
}

b, strong {
    font-weight: 600;
}

a {
    color: #2d2d2d;
    text-decoration: none;
}

ul li {
    list-style: none;
}

//html {scroll-behavior: smooth}
.no-scroll {
    overflow-y: hidden;
}

.main-title {
    font-size: 21px;
    text-transform: uppercase;
}
.main-title-2
{
    text-transform: capitalize;
    position: relative;
    font-size: 18px;
    padding-top: 2px;
    &:after{
        content: "";
        position: absolute;
        height: 2px;
        width: 100%;
        top: -2px;
        left: 0;
        background-color: #dc0021;
    }
}

.image {
    img {
        width: 100%;
        height: 100%;
    }

    &.cover {
        img {
            object-fit: cover;
        }
    }

    &.contain {
        img {
            object-fit: contain;
        }
    }
}

.mobile {
    display: none;
}

.text-danger {
    color: red;
    font-size: 11px
}
.text {
    &-center {
        text-align: center;
    }
}
.fix-top {
    position: fixed;
    top: 0;
    z-index: 1111;
    width: 100%;
    #menu-main {
        top: 60px;
    }
}
@media (max-width: 767px) {
    .main-title {
        text-align: center;
        display: block;
        margin-bottom: 10px;
    }

    .desktop {
        display: none !important;
    }
    .mobile {
        display: block;
    }
}
